클래스구성요소
  1) 클래스의 정의
	  - 필드(멤버변수, attribute)
	    클래스의 특성을 정의
	  - 메소드
	  - 생성자
  2) 클래스의 사용
     - 메모리에 사용할 클래스를 생성
     - 클래스를 JVM에서 사용하기 위해 메모리에 올리는 과정을 객체생성이라 한다. 혹은 인스턴스화라고 한다.
     - 메모리에 할당된 클래스를 객체, 인스턴스라 부른다.
     - 사용자정의클래스를 메모리에 할당
        사용자정의클래스 변수 = new 사용자정의클래스()
  3) 멤버변수
     - 멤버변수의 정의방법
     - 사용방법
     - 접근제한자
       클래스 내부에 선언된 멤버들을 외부에서 접근할 수 있도록 허용하기 위한 방법
       클래스를 정의할때 멤버변수는 private으로 정의하고 public메소드를 통해서 접근할 수 있도록 구현
       
       public : 변수가 선언된 클래스, 같은 패키지에 있는 클래스, 다른 패키지의 외부 클래스 모두 접근이 가능
       protected : 같은 패키지에 있는 클래스들, 다른 패키지에 있는 상속관계의 클래스만 접근이 가능
       default(키워드가 아니라 아무것도 선언하지 않은 상태) : 같은 패키지의 클래스만 접근 가능
       private : 변수가 선언된 클래스에서만 사용 가능
     
       
       
       
            
  4) 메소드
     - 메소드정의
       접근제한자 [특성을 나타내는 키워드] 리턴타입 메소드명(매개변수list...){
               ----------------- -----
               final, static,    리턴값이
               abstract,         없으면
               synchronized      void정의
                                 리턴값이 있으면 리턴값의 타입(기본형,참조형)
               
               
            [return 값]
            ------------
            리턴값이 있는 경우에만 추가하고 리턴할 수 있는 값은 1개만 가능 }   
     
  
  
       ex)
       public void myMethod(){
    
    
    
     - 메소드호출
     메소드가 정의되어 있는 클래스를 객체생성해서 객체를 참조하는 변수를 이용해서 접근
     메소드가정의된클래스 참조변수 = new 메소드가정의된클래스()
     참조변수.메소드명() -> 메소드의 호출
           --------
            사용하고 싶은 메소드의 매개변수가 있으면 매개변수에 전달할 값도 같이 정의해야 한다.
            
     
     
     
     
     
     - static
     - final
     - call by reference/call by value
  5) 생성자
     - 개요
     - 정의
     - 사용방법
                 
oop개요
oop특성
 - 캡슐화
 - 상속
 - 다형성
 - 추상화
 
oop의 5원칙 (SOLID) 
- 
-
-

